Introduction #
A Red-Black Tree is another type of self-balancing Binary Search Tree, just like the AVL Trees that we studied in the previous lesson, but with some additions. The nodes in a Red-Black Tree are colored to either red or black. Colored nodes help in re-balancing the tree after insertion or deletion. There are also some cases used to balance the Red-Black Trees. We will go through the insertion and deletion operations of the Red-Black Tree just like we did in the previous AVL Tree lessons.

Properties of Red-Black Trees #
Every node has either Red or Black color.

The root is always colored black.

Two red nodes cannot be adjacent, i.e. no red parent can have a red child and vice versa.

Every path from the root to a leaf must contain the exact same number of black-colored nodes.

Every null node is considered to be black in color.

From the perspective of implementation, our node class will contain a boolean variable in addition that will store the information about the color of a node.

Given below is the basic structure of a Node which will be used to build a Red-Black Tree.

123456
class Node {
  Node leftChild;
  Node rightChild;
  boolean isRed; //True if Node is RedColored else false
  int data;
}
Node Class
The following is an example of a valid Red-Black Tree:

6
3
12
10
14
8
11
20
NULL
Valid Red-Black Tree
Note: In the illustration given above, the leaf nodes have both NULL children and even though they are not explicitly shown, they are also colored black.

class Node {
  Node leftChild;
  Node rightChild;
  boolean isRed; //True if Node is RedColored else false
  int data;
}

Time Complexity #
Balancing the tree doesn’t result in a tree being perfectly balanced, but it is good enough to get the time complexity close to O(log n)O(logn) for basic operations like searching, deletion, and insertion.

AVL vs Red-Black Trees #
Although AVL Trees are more balanced than Red-Black Trees, AVL Trees take more rotations during insertion and deletion operations than Red-Black Trees. So, if you have a search intensive application where insertion and deletion are not that frequent, then use AVL Trees. Otherwise, use Red-Black Trees for those applications involving more insertions and deletions.

As the above operations involve a series of steps in order to fulfill the property of Red-Black Trees and keep the tree balanced, we will look into each of the operations individually in the ​next lessons.


Insertion in Red-Black Tree #
The following are the steps involved in inserting value into a Red-Black Tree:

Insert currentNode using the standard BST insertion technique that we studied earlier, and make currentNode red.

If currentNode is the root, then change the color of currentNode to black.

If currentNode is not the root, then we will have to perform some operations to make the tree follow the Red-Black property.

Rebalancing the Tree #
To balance an unbalanced tree, we have two techniques which are used depending on some conditions that we will discuss shortly. The two techniques are:

Recoloring Nodes.
Rotating Nodes (left or right).
But before going deeper into the concepts that’ll be a mess for you to understand at this point, let’s slow down and go step by step.

First, we need to define the structure of the Red-Black Tree and some nodes relative to the currentNode, which is the node that we inserted in the Red-Black Tree.

Node C – newly inserted node (currentNode)
Node P – parent of currentNode
Node G – grandparent of currentNode
Node U – uncle of currentNode / sibling of Node P / child of Node G
If currentNode is not a root, and the parent of currentNode is not black, first, we will check Node U (the uncle of currentNode). Based on Node U’s color, we will perform some steps to make the tree balanced. If Node U is red, then do the following:

Change the color of Node P and U to black
Change the color of Node G to red
Make Node G the currentNode and repeat the same process from step two
Disclaimer: The illustrations given in this lesson are providing the visual representation of one case at a time. Therefore, you may notice that the tree gets unbalanced at the end of some of the illustrations. These trees have dummy values. However, in the case of an actual tree with real values, if one step ends up unbalancing the tree, then we keep moving in a bottom-up manner and applying the next possible case until the tree gets balanced again.

    Node P
    Node C
    SubTree 3
    SubTree 1
    SubTree 2
    Node G
    Node U
    SubTree 4
    SubTree 5
 Node U is Red
1 of 6







If Node U (uncle) is black, then we come across four different scenarios based on the arrangements of Node P and G, just like we did in AVL trees. We will cover each of these scenarios and try to help you understand by using illustrations:

Left-Left: Node P is the leftChild of Node G, and currentNode is the leftChild of Node P

Left-Right: Node P is the leftChild of Node G, and currentNode is the rightChild of Node P

Right-Right: Node P is the rightChild of Node G, and currentNode is the rightChild of Node P

Right-Left: Node P is the rightChild of Node G, and currentNode is the leftChild of Node P

Case 1: Left-Left #
When Node P is the leftChild of Node G, and currentNode is the leftChild of Node P, we perform the following steps:

Rotate Node G towards the Right
Swap the colors of Nodes G and P
Look at the illustration below for a better understanding.

    Node P
    Node C
    SubTree 3
    SubTree 1
    SubTree 2
    Node G
    Node U
    SubTree 4
    SubTree 5
 Node U is Black,L-L Case
1 of 5







Case 2: Left-Right #
When Node P is the leftChild of Node G, and currentNode is the rightChild of Node P, we perform the following steps:

Rotate Node P towards the Left
After that, repeat the steps that we covered in Left-Left case
Look at the illustration below for a better understanding.

    Node P
    Node C
    SubTree 3
    SubTree 1
    SubTree 2
    Node G
    Node U
    SubTree 4
    SubTree 5
 Node U is Black,L-R Case
1 of 8







Case 3: Right-Right #
When Node P is the rightChild of Node G, and currentNode is the rightChild of Node P, we perform the following steps:

Rotate Node G towards the Left
Swap the colors of Nodes G and P
Look at the illustration below for a better understanding.

    Node P
    Node C
    SubTree 3
    SubTree 1
    SubTree 2
    Node G
    Node U
    SubTree 4
    SubTree 5
 Node U is Black,R-R Case
1 of 5







Case 4: Right-Left #
When Node P is the rightChild of Node G, and currentNode is the leftChild of Node P, we perform the following steps:

Rotate Node P towards Right
After that, repeat the steps that we covered in Right-Right case
Look at the illustration below for a better understanding.

    Node P
    Node C
    SubTree 3
    SubTree 1
    SubTree 2
    Node G
    Node U
    SubTree 4
    SubTree 5
 Node U is Black,R-L Case
1 of 8



Red-Black Tree Deletion
This lesson will cover the deletion operation in Red-Black Trees, discussing all four of the deletion cases.

We'll cover the following

Deletion in Red-Black Tree
Steps for Deletion
Deletion Cases
Case 1: Left-Left
Case 2: Right-Right
Case 3: Left-Right
Case 4: Right-Left
Deletion in Red-Black Tree #
Before we start discussing how deletion works in a Red-Black Tree, let’s see the main difference between insertion and deletion operations in Red-Black Trees.

In insertion, we may violate the property of a red parent having a red child. At the same time, in a deletion operation, we may end up deleting a black node which could violate the property of, “the same number of black nodes from root to the null for every path”.

In insertion, we check the color of the uncle node (uncle to currentNode), and based on the color we perform appropriate operations to balance the tree. In the deletion operation, we will check the color of the sibling node (sibling to currentNode), and based on its color we will perform some actions to balance the tree again.

Disclaimer: The illustrations given in this lesson are providing the visual representation of one case at a time. Therefore, you may notice that the tree gets unbalanced at the end of some of the illustrations. These trees have dummy values. However, in the case of an actual tree with real values, if one step ends up unbalancing the tree, then we keep moving in a bottom-up manner and applying the next possible case until the tree gets balanced again.

Steps for Deletion #
Following are the steps involved to remove any value in a Red-Black Tree:

Search for a node with the given value to remove. We will call it currentNode
Remove currentNode using standard BST deletion operation that we studied earlier
We already know that for deletion in BST, we always end up deleting either a leaf node or a node with only one child.

In the case of leaf node deletion, it is easy to just delete the node and link the parent of the node to be deleted with null
In the case of a node with one child, deletion is relatively easy as we just link the parent of the node to be deleted with that one child
Let’s name some nodes relative to Node C, which is the node that we want to delete:

Node C – node to be deleted (currentNode)
Node P – parent node of currentNode
Node S – sibling node (once we rotate tree, Node R will have a sibling node which we name as Node S)
Node SC – child node of Node S
Node R – node to be replaced with currentNode and linked with Node P (Node R is the single child of Node C)
Deletion Cases #
Now we will take a look at some of the deletion cases and see what steps should be performed in each of these cases to make the tree balanced again. Given below is the first case in which Node C or Node R is red. In this type of scenario, we make Node R black and link it to Node P.

    Node P
    Node C
    SubTree 3
    Node R
    SubTree 1
    SubTree 2
 Node C or Ris Red
1 of 5







The second case is if both Node C and Node R are black, then make Node R black. Now Node R is double black, i.e. it was already black, and when both Node C and Node R are black, then we make Node R black again. Remember that null is always considered to have a black color.

Now we will convert Node R from double to single black.

    Node P
    Node C
    SubTree 3
    Node R
    SubTree 1
    SubTree 2
 Both Node C and R are Black
1 of 5







We need to perform the following steps while Node R is double black and not the root of the Tree. Use the specifications that Node S (sibling of Node R) is black and one or both of Node S children are red:

Left-Left: Node S is the leftChild of Node P, and Node SC (red) is the leftChild of S, or both children of S are red.

Right-Right: Node S is the rightChild of Node P, and Node SC (red) is the rightChild of S, or both children of S are red.

Left-Right: Node S is the leftChild of Node P and Node SC (red) is the rightChild of S.

Right-Left: Node S is the rightChild of Node P and Node SC (red) is the leftChild of S.


Case 1: Left-Left #
In the case when Node S is the leftChild of Node P, and Node SC (red) is the leftChild of S or both children of S are red, we perform the following steps:

Rotate Node P towards the right
Make the right child of Node S the left child of Node P
Look at the illustration below for a better understanding.

    Node P
    Node C
    Node S
    Node R
    SubTree 1
    SubTree 2
    Node SC
    Node SC
 Left-Left Case
1 of 7







Case 2: Right-Right #
In the case when Node S is the rightChild of Node P, and Node SC (red) is the rightChild of S or both children of S are red, we perform the following steps:

Rotate Node P towards the left
Make the left child of Node S the right child of Node P
Look at the illustration below for a better understanding.

    Node P
    Node C
    Node S
    Node R
    SubTree 1
    SubTree 2
    Node SC
    Node SC
 Right-Right Case
1 of 8







Case 3: Left-Right #
In the case when Node S is the leftChild of Node P and Node SC (red) is the rightChild of S, we perform the following steps:

Rotate Node S towards the left
Rotate Node P towards the right
Look at the illustration below for a better understanding.

    Node P
    Node C
    Node S
    Node R
    SubTree 1
    SubTree 2
    subTree
    Node SC
 Left-Right Case
1 of 9







Case 4: Right-Left #
In the case when Node S is the rightChild of Node P and Node SC (red) is the leftChild of S, we perform the following steps:

Rotate Node S towards the right
Rotate Node P towards the left
Look at the illustration below for a better understanding.

    Node P
    Node C
    Node S
    Node R
    SubTree 1
    SubTree 2
    subTree
    Node SC
 Right-Left Case
1 of 10







Till this point, we have studied a number of trees from Binary Trees to different types of Binary Trees like BST, and then even further types of BST like AVL and Red-Black Trees. We have covered both basic deletion and insertion operations of these trees along with Java Implementation of BST. We are now left with only one important tree data structure known as 2-3 Trees. So, in the next lesson, we will cover it in detail just like we did with the rest of the tree structures.





