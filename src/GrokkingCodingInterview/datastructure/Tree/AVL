AVL trees are a self-balanced special type of Binary Search Tree with just one exception:

For each Node, the maximum height difference between the left and right sub-trees can only be one.

If at any point their difference becomes more than one, then re-balancing is applied to make it a valid AVL tree.

Time Complexity #
As we studied earlier, in the case of BST, the Big(O) of all three basic operations (Insertion, Deletion, and Searching) takes O(h)O(h) time, where “h” is the height of a Binary Search Tree.

In the case of Skewed Trees, the complexity becomes O(n)O(n), where “n” is the number of nodes in the tree. Now to improve time complexity, We have to manage the height of the tree to improve time complexity, such that we can bring the time down to O(logn)O(logn) for performing these basic operations.


When to use AVL Trees? #
As AVL are strictly balanced, AVL Trees are preferred in those applications where the lookup​ is the​ ​ most vital operation. The following is an example of a valid AVL Tree:

6
8
4
7
5
3
2
The tree in the above figure is an AVL Tree, as its subtrees follow the property that each node has a maximum height difference of ​​one.

Given below is an example of an invalid AVL tree as the height between the sibling nodes exceeds one.

8
6
12
4
7
5
3
2
10
The next lesson will cover the basic operations performed in an AVL tree. The operations involve a series of steps and cases to follow. These steps will be required to fulfill the property of AVL trees to keep the tree balanced. We will look into each of these operations individually in the next lessons.

As you can see in the left-left case, we only need to make a single rotation towards the right at Node U to balance the AVL tree. In the final balanced version, Node C becomes the parent node of Node G and U and its two subtrees become balanced.

Case 2: Left-Right #
    Node U
    Node C
    SubTree4
    Node G
    SubTree3
    SubTree 1
    SubTree2
 L-R Case
1 of 7







In the left-right case we need to make two rotations:

First is a left rotation at Node C.
Second is a right rotation at Node U.
These two rotations balance the AVL tree. In this case, Node G becomes the parent node of both Node C and U.

Case 3: Right-Right #
    Node U
    Node C
    SubTree4
    Node G
    SubTree3
    SubTree 1
    SubTree2
 R-R Case
1 of 4







The right-right case is just like the left-left case. The only difference is that instead of rotating right, we ​need to make a ​single rotation towards the left at Node U to balance the AVL tree. In the final balanced version, Node C becomes the parent node of Node G and U and its two subtrees become balanced.

Case 4: Right-Left #
    Node U
    Node C
    SubTree4
    Node G
    SubTree3
    SubTree 1
    SubTree2
 R-L Case
1 of 8







The right-left case is similar to the left-right case. The only difference is that the two rotations performed are as follows:

First is a right rotation at Node C.
Second is a left rotation at Node U.
These two rotations balance the AVL tree. In this case, Node G becomes the parent node of both Node C and U.

Time Complexity #
Considering that it takes constant time to do left-right rotation operations and update the height to get a balanced tree, the time complexity of an AVL insert remains the same as BST insert: O(h)O(h) where h is the height of the tree. However, since the AVL tree is balanced, the height is O(Logn)O(Logn); so time complexity of an AVL insert is O(Logn)O(Logn).

That’s it! We have now covered all four cases of insertion. In the next lesson, we will see how the deletion operation works in AVL Tree.

Deletion in AVL Tree #
Deletion is similar to AVL’s insertion operation with just one exception:

The deletion operation adds an extra step after the insertion method’s rotation and balancing of the first unbalanced node.

After fixing the first unbalanced node through rotations, start moving up and fix the next unbalanced node. Keep on fixing the unbalanced nodes until you reach the root.

Steps for Deletion #
The following are the detailed steps for removing value from AVL Trees.

Step 1: Delete currentNode #
Delete the currentNode in the same way as we did in BST deletion. At this point, the tree will become unbalanced, and we would need to perform some kind of rotation (left or right) to rebalance the tree.

Step 2: Traverse Upwards #
Start traversing from currentNode upwards till you find the first unbalanced node.

Let’s look at some of the terms we will be using while re-balancing the tree.

Node U — an unbalanced node
Node C — child node of node U
Node G — grandchild node of node U
Step 3: Rebalance the Tree #
To rebalance the tree, we will perform rotations on the subtree where U is the root node.

There are two types of rotations:

left
right
We came across four different scenarios based on the arrangements of Nodes U, C and, G.

Left-Left: Node C is the left-child of Node U, and Node G is the left-child of Node C.

Left-Right: Node C is the left-child of Node U, and Node G is the right-child of Node C.

Right-Right: Node C is the right-child of Node U, and Node G is the right-child of Node C.

Right-Left: Node C is the right-child of Node U, and Node G is the left-child of Node C.

After performing a successful rotation for the first unbalanced Node U, traverse up and find the next unbalanced node and perform the same series of operations to balance. Keep on balancing the unbalanced nodes from first Node U to ancestors of Node U until we reach the root. After that point, we will have a fully balanced AVL Tree.

Case 1: Left-Left #
    Node U
    Node C
    SubTree4
    Node G
    SubTree3
    SubTree 1
    SubTree2
 L-L Case
1 of 4







When a node in our AVL tree is deleted, ​and the tree becomes unbalanced, we traverse upwards from that node till we find the first unbalanced node. In the example above, the first unbalanced node is Node U. If it is the left-left case, we only need to make a single rotation towards the right at the Node U to balance the AVL tree. In the final balanced version, Node C becomes the parent node of Node G and U and its two subtrees become balanced.

Case 2: Left-Right #
    Node U
    Node C
    SubTree4
    Node G
    SubTree3
    SubTree 1
    SubTree2
 L-R Case
1 of 7







Again, in the example above, the first unbalanced node after performing the deletion operation is denoted as Node U.

It is the left-right case, so we need to make two rotations:

First is a left rotation at Node C.
Second is a right rotation at Node U.
These two rotations balance the AVL tree. In this case, Node G becomes the parent node of both Node C and U.

Case 3: Right-Right #
    Node U
    Node C
    SubTree4
    Node G
    SubTree3
    SubTree 1
    SubTree2
 R-R Case
1 of 4







If the case after deletion is the right-right case, then we need to make a ​single rotation just like the left-left case. However​, in this case,​ it will be a left rotation at Node U to balance the AVL tree. In the final balanced version, Node C becomes the parent node of Node G and U and its two subtrees become balanced.

Case 4: Right-Left #
    Node U
    Node C
    SubTree4
    Node G
    SubTree3
    SubTree 1
    SubTree2
 R-L Case
1 of 8







If the case after deletion is a right-left case, then (similar to the left-right case) we need to make two rotations as follows:

First is a right rotation at Node C.
Second is a left rotation at Node U.
These two rotations balance the AVL tree. In this case, Node G becomes the parent node of both Node C and U.

Time Complexity #
Considering that it takes constant time to do left-right rotation operations and update the height to get a balanced tree, the time complexity of an AVL insert remains the same as a BST insert: O(h)O(h) where h is the height of the tree. However, since AVL tree is balanced, the height is O(Logn)O(Logn). Therefore, the time complexity of AVL delete is O(Logn)O(Logn).

In the next lesson, we will study another variation of Binary Trees known as Red-Black Trees. Just like we studied basic operations of AVL Trees, we will go through how insertion and deletion work in a Red-Black Tree.

